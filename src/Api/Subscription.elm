-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Subscription exposing (..)

import Api.Enum.Games_select_column
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias GamesOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.Games_select_column.Games_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.Games_order_by)
    , where_ : OptionalArgument Api.InputObject.Games_bool_exp
    }


{-| fetch data from the table: "games"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
games : (GamesOptionalArguments -> GamesOptionalArguments) -> SelectionSet decodesTo Api.Object.Games -> SelectionSet (List decodesTo) RootSubscription
games fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.Games_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodeGames_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeGames_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "games" optionalArgs object_ (identity >> Decode.list)


type alias GamesAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.Games_select_column.Games_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.Games_order_by)
    , where_ : OptionalArgument Api.InputObject.Games_bool_exp
    }


{-| fetch aggregated fields from the table: "games"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
games_aggregate : (GamesAggregateOptionalArguments -> GamesAggregateOptionalArguments) -> SelectionSet decodesTo Api.Object.Games_aggregate -> SelectionSet decodesTo RootSubscription
games_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.Games_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodeGames_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeGames_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "games_aggregate" optionalArgs object_ identity


type alias GamesByPkRequiredArguments =
    { id : Int }


{-| fetch data from the table: "games" using primary key columns
-}
games_by_pk : GamesByPkRequiredArguments -> SelectionSet decodesTo Api.Object.Games -> SelectionSet (Maybe decodesTo) RootSubscription
games_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "games_by_pk" [ Argument.required "id" requiredArgs.id Encode.int ] object_ (identity >> Decode.nullable)
